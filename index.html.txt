<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Adivinhe a Cor - Tema Escuro</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            touch-action: manipulation;
            background-color: #111827; /* bg-gray-900 */
            color: #d1d5db; /* text-gray-300 */
        }
        .slider-thumb::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 22px;
            height: 22px;
            border-radius: 50%;
            cursor: pointer;
            border: 2px solid #f9fafb;
            margin-top: -8px; /* Adjust for track height */
        }
        .slider-thumb::-moz-range-thumb {
            width: 22px;
            height: 22px;
            border-radius: 50%;
            cursor: pointer;
            border: 2px solid #f9fafb;
        }
        .slider-track {
            height: 6px;
            border-radius: 3px;
        }
        .popup, .history-popup, .difficulty-popup { /* Combined common styles */
            display: none;
            position: fixed;
            z-index: 100;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.75);
            align-items: center;
            justify-content: center;
            padding: 1rem;
        }
        .popup-content, .history-popup-content, .difficulty-popup-content { /* Combined common styles */
            background-color: #1f2937; /* bg-gray-800 */
            color: #d1d5db; /* text-gray-300 */
            margin: auto;
            padding: 24px;
            border: 1px solid #374151; /* bg-gray-700 */
            width: 90%;
            max-width: 450px;
            border-radius: 12px;
            text-align: center;
            box-shadow: 0 10px 25px -5px rgba(0,0,0,0.3), 0 20px 40px -20px rgba(0,0,0,0.5);
            position: relative;
        }
        .history-popup-content, .difficulty-popup-content {
             max-height: 80vh;
             overflow-y: auto;
        }
        .close-button {
            color: #9ca3af;
            position: absolute;
            top: 12px;
            right: 16px;
            font-size: 32px;
            font-weight: bold;
            cursor: pointer;
            line-height: 1;
        }
        .close-button:hover,
        .close-button:focus {
            color: #f3f4f6;
            text-decoration: none;
        }
        .btn-active:active {
            transform: scale(0.96);
            opacity: 0.85;
        }
        .adjust-btn {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            border-radius: 8px;
        }
        input[type="range"]:focus { outline: none; }
        input[type="range"].focus-visible:focus { box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.5); }
        button:focus { outline: none; }
        button.focus-visible:focus { box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.5); }

        .history-item {
            background-color: #374151;
            padding: 12px;
            margin-bottom: 10px;
            border-radius: 8px;
            text-align: left;
            font-size: 0.875rem;
        }
        .history-item p { margin-bottom: 4px; }
        .history-item strong { color: #a5b4fc; }
        .history-color-preview {
            display: inline-block;
            width: 1em;
            height: 1em;
            border-radius: 3px;
            margin-right: 0.5em;
            vertical-align: middle;
            border: 1px solid #4b5563;
        }
        .difficulty-btn {
            width: 100%;
            margin-bottom: 0.75rem; /* 12px */
        }
        .difficulty-btn.active {
            background-color: #4f46e5; /* indigo-600 */
            color: white;
            border: 2px solid #818cf8; /* indigo-400 */
        }
    </style>
</head>
<body class="flex flex-col items-center justify-center min-h-screen p-4">

    <div class="w-full max-w-md bg-gray-800 p-6 sm:p-8 rounded-xl shadow-2xl relative">
        <div class="absolute top-4 right-4 flex space-x-2">
            <button id="difficultyButton" class="bg-gray-700 hover:bg-gray-600 text-gray-300 font-semibold py-2 px-3 rounded-lg text-sm shadow-md focus-visible btn-active">
                Dificuldade: <span id="currentDifficultyDisplay">Difícil</span>
            </button>
            <button id="historyButton" class="bg-gray-700 hover:bg-gray-600 text-gray-300 font-semibold py-2 px-3 rounded-lg text-sm shadow-md focus-visible btn-active">
                Histórico
            </button>
        </div>

        <h1 class="text-3xl font-bold text-center text-gray-100 mb-8 pt-12 sm:pt-8">Adivinhe a Cor</h1>

        <div class="flex justify-around mb-8 space-x-4">
            <div class="w-1/2 aspect-square rounded-lg shadow-lg flex items-center justify-center border-2 border-gray-700" id="targetColorSquare">
                <p class="text-xs text-gray-300 bg-black bg-opacity-40 px-2 py-1 rounded-md">Cor Alvo</p>
            </div>
            <div class="w-1/2 aspect-square rounded-lg shadow-lg flex items-center justify-center border-2 border-gray-700" id="userColorSquare">
                 <p class="text-xs text-gray-300 bg-black bg-opacity-40 px-2 py-1 rounded-md">Sua Cor</p>
            </div>
        </div>

        <div class="space-y-6 mb-8">
            <div>
                <label for="redSlider" class="block text-sm font-medium text-gray-300 mb-1">Vermelho: <span id="redValue" class="font-semibold">128</span></label>
                <input type="range" id="redSlider" min="0" max="255" value="128" step="1" class="w-full appearance-none cursor-pointer slider-thumb slider-track focus-visible">
                <div class="flex justify-between items-center mt-2.5">
                    <button id="redDecrement" class="adjust-btn bg-gray-700 hover:bg-gray-600 text-gray-200 font-bold shadow-md btn-active focus-visible">-</button>
                    <button id="redIncrement" class="adjust-btn bg-gray-700 hover:bg-gray-600 text-gray-200 font-bold shadow-md btn-active focus-visible">+</button>
                </div>
            </div>
            <div>
                <label for="greenSlider" class="block text-sm font-medium text-gray-300 mb-1">Verde: <span id="greenValue" class="font-semibold">128</span></label>
                <input type="range" id="greenSlider" min="0" max="255" value="128" step="1" class="w-full appearance-none cursor-pointer slider-thumb slider-track focus-visible">
                <div class="flex justify-between items-center mt-2.5">
                    <button id="greenDecrement" class="adjust-btn bg-gray-700 hover:bg-gray-600 text-gray-200 font-bold shadow-md btn-active focus-visible">-</button>
                    <button id="greenIncrement" class="adjust-btn bg-gray-700 hover:bg-gray-600 text-gray-200 font-bold shadow-md btn-active focus-visible">+</button>
                </div>
            </div>
            <div>
                <label for="blueSlider" class="block text-sm font-medium text-gray-300 mb-1">Azul: <span id="blueValue" class="font-semibold">128</span></label>
                <input type="range" id="blueSlider" min="0" max="255" value="128" step="1" class="w-full appearance-none cursor-pointer slider-thumb slider-track focus-visible">
                <div class="flex justify-between items-center mt-2.5">
                    <button id="blueDecrement" class="adjust-btn bg-gray-700 hover:bg-gray-600 text-gray-200 font-bold shadow-md btn-active focus-visible">-</button>
                    <button id="blueIncrement" class="adjust-btn bg-gray-700 hover:bg-gray-600 text-gray-200 font-bold shadow-md btn-active focus-visible">+</button>
                </div>
            </div>
        </div>

        <div class="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-4">
            <button id="confirmButton" class="w-full sm:w-1/2 bg-indigo-600 hover:bg-indigo-500 text-white font-semibold py-3 px-4 rounded-lg shadow-lg focus-visible transition-all duration-150 ease-in-out transform btn-active">
                Confirmar
            </button>
            <button id="mainRestartButton" class="w-full sm:w-1/2 bg-gray-600 hover:bg-gray-500 text-gray-100 font-semibold py-3 px-4 rounded-lg shadow-lg focus-visible transition-all duration-150 ease-in-out transform btn-active">
                Reiniciar Jogo
            </button>
        </div>
    </div>

    <div id="scorePopup" class="popup">
        <div class="popup-content">
            <span class="close-button" id="closeScorePopup">&times;</span>
            <h2 class="text-2xl font-semibold mb-4 text-gray-100" id="popupTitle">Resultado</h2>
            <p class="mb-3 text-gray-300">Diferença Total: <strong id="scoreValue" class="text-3xl text-indigo-400"></strong></p>
            <div class="text-sm space-y-1 text-gray-400 mb-6">
                <p>Cor Alvo (RGB): <span id="targetRgbValue" class="font-mono"></span></p>
                <p>Sua Cor (RGB): <span id="userRgbValue" class="font-mono"></span></p>
            </div>
            <div class="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-4">
                <button id="popupEditButton" class="w-full sm:w-1/2 bg-gray-600 hover:bg-gray-500 text-gray-100 font-semibold py-2.5 px-6 rounded-lg shadow-md focus-visible btn-active">
                    Editar
                </button>
                <button id="popupRestartButton" class="w-full sm:w-1/2 bg-indigo-600 hover:bg-indigo-500 text-white font-semibold py-2.5 px-6 rounded-lg shadow-md focus-visible btn-active">
                    Nova Cor (Reiniciar)
                </button>
            </div>
        </div>
    </div>

    <div id="historyPopup" class="history-popup">
        <div class="history-popup-content">
            <span class="close-button" id="closeHistoryPopup">&times;</span>
            <h2 class="text-2xl font-semibold mb-6 text-gray-100">Histórico de Pontuações</h2>
            <div id="historyListContainer" class="max-h-60vh overflow-y-auto text-left">
                <p id="noHistoryText" class="text-gray-400 text-center">Nenhuma pontuação registrada ainda.</p>
            </div>
             <button id="clearHistoryButton" class="mt-6 bg-red-700 hover:bg-red-600 text-white font-semibold py-2 px-6 rounded-lg shadow-md focus-visible btn-active">
                Limpar Histórico
            </button>
        </div>
    </div>

    <div id="difficultyPopup" class="difficulty-popup">
        <div class="difficulty-popup-content">
            <span class="close-button" id="closeDifficultyPopup">&times;</span>
            <h2 class="text-2xl font-semibold mb-6 text-gray-100">Escolha a Dificuldade</h2>
            <div class="space-y-3">
                <button id="difficultyEasy" data-difficulty="easy" class="difficulty-btn bg-gray-700 hover:bg-gray-600 text-gray-200 font-semibold py-3 px-4 rounded-lg shadow-md focus-visible btn-active">
                    Fácil (incremento 10, alvo múltiplo de 10)
                </button>
                <button id="difficultyMedium" data-difficulty="medium" class="difficulty-btn bg-gray-700 hover:bg-gray-600 text-gray-200 font-semibold py-3 px-4 rounded-lg shadow-md focus-visible btn-active">
                    Médio (incremento 5, alvo múltiplo de 5)
                </button>
                <button id="difficultyHard" data-difficulty="hard" class="difficulty-btn bg-gray-700 hover:bg-gray-600 text-gray-200 font-semibold py-3 px-4 rounded-lg shadow-md focus-visible btn-active">
                    Difícil (incremento 1, alvo qualquer)
                </button>
            </div>
        </div>
    </div>

    <script>
        // DOM Elements
        const targetColorSquare = document.getElementById('targetColorSquare');
        const userColorSquare = document.getElementById('userColorSquare');
        const sliders = {
            red: document.getElementById('redSlider'),
            green: document.getElementById('greenSlider'),
            blue: document.getElementById('blueSlider')
        };
        const valueSpans = {
            red: document.getElementById('redValue'),
            green: document.getElementById('greenValue'),
            blue: document.getElementById('blueValue')
        };
        const confirmButton = document.getElementById('confirmButton');
        const mainRestartButton = document.getElementById('mainRestartButton');

        const adjustButtons = {
            red: { dec: document.getElementById('redDecrement'), inc: document.getElementById('redIncrement') },
            green: { dec: document.getElementById('greenDecrement'), inc: document.getElementById('greenIncrement') },
            blue: { dec: document.getElementById('blueDecrement'), inc: document.getElementById('blueIncrement') }
        };

        // Score Popup
        const scorePopup = document.getElementById('scorePopup');
        const closeScorePopup = document.getElementById('closeScorePopup');
        const popupTitle = document.getElementById('popupTitle');
        const scoreValueSpan = document.getElementById('scoreValue');
        const targetRgbValueSpan = document.getElementById('targetRgbValue');
        const userRgbValueSpan = document.getElementById('userRgbValue');
        const popupEditButton = document.getElementById('popupEditButton');
        const popupRestartButton = document.getElementById('popupRestartButton');

        // History
        const historyButton = document.getElementById('historyButton');
        const historyPopup = document.getElementById('historyPopup');
        const closeHistoryPopup = document.getElementById('closeHistoryPopup');
        const historyListContainer = document.getElementById('historyListContainer');
        const noHistoryText = document.getElementById('noHistoryText');
        const clearHistoryButton = document.getElementById('clearHistoryButton');

        // Difficulty
        const difficultyButton = document.getElementById('difficultyButton');
        const currentDifficultyDisplay = document.getElementById('currentDifficultyDisplay');
        const difficultyPopup = document.getElementById('difficultyPopup');
        const closeDifficultyPopup = document.getElementById('closeDifficultyPopup');
        const difficultyEasyBtn = document.getElementById('difficultyEasy');
        const difficultyMediumBtn = document.getElementById('difficultyMedium');
        const difficultyHardBtn = document.getElementById('difficultyHard');

        let targetRed, targetGreen, targetBlue;
        let scoreHistory = [];
        let currentDifficulty = 'hard'; // Default difficulty

        const difficultySettings = {
            easy: { increment: 10, multiple: 10, name: 'Fácil' },
            medium: { increment: 5, multiple: 5, name: 'Médio' },
            hard: { increment: 1, multiple: 1, name: 'Difícil' }
        };

        // --- Core Game Logic ---
        function generateRandomComponent(multiple) {
            const numSteps = Math.floor(255 / multiple);
            return Math.floor(Math.random() * (numSteps + 1)) * multiple;
        }

        function setRandomTargetColor() {
            const { multiple } = difficultySettings[currentDifficulty];
            targetRed = generateRandomComponent(multiple);
            targetGreen = generateRandomComponent(multiple);
            targetBlue = generateRandomComponent(multiple);
            targetColorSquare.style.backgroundColor = `rgb(${targetRed}, ${targetGreen}, ${targetBlue})`;
        }

        function updateUserColor() {
            const r = parseInt(sliders.red.value);
            const g = parseInt(sliders.green.value);
            const b = parseInt(sliders.blue.value);

            valueSpans.red.textContent = r;
            valueSpans.green.textContent = g;
            valueSpans.blue.textContent = b;
            userColorSquare.style.backgroundColor = `rgb(${r}, ${g}, ${b})`;

            sliders.red.style.background = `linear-gradient(to right, rgb(0, ${g}, ${b}), rgb(255, ${g}, ${b}))`;
            sliders.green.style.background = `linear-gradient(to right, rgb(${r}, 0, ${b}), rgb(${r}, 255, ${b}))`;
            sliders.blue.style.background = `linear-gradient(to right, rgb(${r}, ${g}, 0), rgb(${r}, ${g}, 255))`;

            document.documentElement.style.setProperty('--red-thumb-color', `rgb(${r}, 60, 60)`);
            document.documentElement.style.setProperty('--green-thumb-color', `rgb(60, ${g}, 60)`);
            document.documentElement.style.setProperty('--blue-thumb-color', `rgb(60, 60, ${b})`);
        }

        function calculateScore(r_target, g_target, b_target, r_user, g_user, b_user) {
            const diffR = Math.abs(r_target - r_user);
            const diffG = Math.abs(g_target - g_user);
            const diffB = Math.abs(b_target - b_user);
            return diffR + diffG + diffB;
        }

        // --- Difficulty Handling ---
        function applyDifficulty(level) {
            currentDifficulty = level;
            const { increment, name } = difficultySettings[level];

            currentDifficultyDisplay.textContent = name;

            // Update slider steps
            sliders.red.step = increment;
            sliders.green.step = increment;
            sliders.blue.step = increment;

            // Update active button style in difficulty popup
            [difficultyEasyBtn, difficultyMediumBtn, difficultyHardBtn].forEach(btn => {
                btn.classList.remove('active');
                if (btn.dataset.difficulty === level) {
                    btn.classList.add('active');
                }
            });

            performRestartGame(); // Restart game with new difficulty
            hideDifficultyPopup();
        }

        function showDifficultyPopup() { difficultyPopup.style.display = 'flex'; }
        function hideDifficultyPopup() { difficultyPopup.style.display = 'none'; }


        // --- Popup Handling ---
        function showScorePopup(differenceScore, targetRgb, userRgb) {
            scoreValueSpan.textContent = differenceScore;
            targetRgbValueSpan.textContent = `(${targetRgb.r}, ${targetRgb.g}, ${targetRgb.b})`;
            userRgbValueSpan.textContent = `(${userRgb.r}, ${userRgb.g}, ${userRgb.b})`;

            if (differenceScore === 0) popupTitle.textContent = "Perfeito! 🎉";
            else if (differenceScore <= 15 * difficultySettings[currentDifficulty].multiple) popupTitle.textContent = "Quase lá! Excelente! 👍";
            else if (differenceScore <= 45 * difficultySettings[currentDifficulty].multiple) popupTitle.textContent = "Muito Bom! 😊";
            else if (differenceScore <= 100 * difficultySettings[currentDifficulty].multiple) popupTitle.textContent = "Bom Esforço! 🙂";
            else popupTitle.textContent = "Continue Tentando! 🤔";
            scorePopup.style.display = 'flex';
        }
        function hideScorePopup() { scorePopup.style.display = 'none'; }

        // --- History Handling ---
        function addToHistory(targetColor, userColor, difference) {
            const timestamp = new Date();
            scoreHistory.unshift({
                target: targetColor, user: userColor, diff: difference,
                time: timestamp.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' }) + ' ' + timestamp.toLocaleDateString('pt-BR'),
                difficulty: difficultySettings[currentDifficulty].name
            });
            renderHistory();
        }

        function renderHistory() {
            while (historyListContainer.firstChild && historyListContainer.firstChild !== noHistoryText) {
                historyListContainer.removeChild(historyListContainer.firstChild);
            }
            if (scoreHistory.length === 0) {
                noHistoryText.style.display = 'block';
            } else {
                noHistoryText.style.display = 'none';
                scoreHistory.forEach(item => {
                    const historyDiv = document.createElement('div');
                    historyDiv.className = 'history-item';
                    historyDiv.innerHTML = `
                        <p><strong>Diferença:</strong> ${item.diff} (Dificuldade: ${item.difficulty})</p>
                        <p><span class="history-color-preview" style="background-color: rgb(${item.target.r},${item.target.g},${item.target.b});"></span><strong>Alvo:</strong> rgb(${item.target.r}, ${item.target.g}, ${item.target.b})</p>
                        <p><span class="history-color-preview" style="background-color: rgb(${item.user.r},${item.user.g},${item.user.b});"></span><strong>Sua Cor:</strong> rgb(${item.user.r}, ${item.user.g}, ${item.user.b})</p>
                        <p class="text-xs text-gray-500">${item.time}</p>
                    `;
                    historyListContainer.insertBefore(historyDiv, noHistoryText);
                });
            }
        }
        function showHistoryPopup() { renderHistory(); historyPopup.style.display = 'flex'; }
        function hideHistoryPopup() { historyPopup.style.display = 'none'; }
        function clearHistory() {
            // Changed confirm to a simpler approach as it's problematic in iframes
            if (scoreHistory.length > 0 && window.prompt("Para limpar o histórico, digite 'SIM'") === "SIM") {
                 scoreHistory = [];
                 renderHistory();
            } else if (scoreHistory.length === 0) {
                // If no history, maybe show a small message or do nothing
                const tempMsg = document.createElement('p');
                tempMsg.textContent = "Histórico já está vazio.";
                tempMsg.className = "text-sm text-yellow-400 text-center";
                historyListContainer.appendChild(tempMsg);
                setTimeout(() => tempMsg.remove(), 2000);
            }
        }

        // --- Event Listeners ---
        ['red', 'green', 'blue'].forEach(color => {
            sliders[color].addEventListener('input', updateUserColor);
        });


        function setupAdjustButtonListeners() {
            const { increment } = difficultySettings[currentDifficulty];
            ['red', 'green', 'blue'].forEach(color => {
                adjustButtons[color].dec.onclick = () => {
                    let val = parseInt(sliders[color].value);
                    sliders[color].value = Math.max(0, val - increment);
                    // Ensure value is a multiple of increment if slider step doesn't handle it perfectly
                    sliders[color].value = Math.round(sliders[color].value / increment) * increment;
                    updateUserColor();
                };
                adjustButtons[color].inc.onclick = () => {
                    let val = parseInt(sliders[color].value);
                    sliders[color].value = Math.min(255, val + increment);
                     sliders[color].value = Math.round(sliders[color].value / increment) * increment;
                     if (sliders[color].value > 255) sliders[color].value = Math.floor(255 / increment) * increment; // Cap at max multiple
                    updateUserColor();
                };
            });
        }

        confirmButton.addEventListener('click', () => {
            const userR = parseInt(sliders.red.value);
            const userG = parseInt(sliders.green.value);
            const userB = parseInt(sliders.blue.value);
            const target = { r: targetRed, g: targetGreen, b: targetBlue };
            const user = { r: userR, g: userG, b: userB };
            const difference = calculateScore(target.r, target.g, target.b, user.r, user.g, user.b);
            showScorePopup(difference, target, user);
            addToHistory(target, user, difference);
        });

        function performRestartGame() {
            setRandomTargetColor();
            const { increment } = difficultySettings[currentDifficulty];
            // Reset sliders to a mid-range multiple of the current increment
            const midValueBase = 128;
            const resetValue = Math.round(midValueBase / increment) * increment;

            sliders.red.value = Math.min(255, resetValue); // Ensure not over 255
            sliders.green.value = Math.min(255, resetValue);
            sliders.blue.value = Math.min(255, resetValue);
            updateUserColor();
            setupAdjustButtonListeners(); // Re-setup with new increment
        }

        mainRestartButton.addEventListener('click', performRestartGame);

        // Score Popup Buttons
        closeScorePopup.addEventListener('click', hideScorePopup);
        popupEditButton.addEventListener('click', hideScorePopup);
        popupRestartButton.addEventListener('click', () => {
            hideScorePopup();
            performRestartGame();
        });

        // History Popup Buttons
        historyButton.addEventListener('click', showHistoryPopup);
        closeHistoryPopup.addEventListener('click', hideHistoryPopup);
        clearHistoryButton.addEventListener('click', clearHistory);

        // Difficulty Popup Buttons
        difficultyButton.addEventListener('click', showDifficultyPopup);
        closeDifficultyPopup.addEventListener('click', hideDifficultyPopup);
        difficultyEasyBtn.addEventListener('click', () => applyDifficulty('easy'));
        difficultyMediumBtn.addEventListener('click', () => applyDifficulty('medium'));
        difficultyHardBtn.addEventListener('click', () => applyDifficulty('hard'));

        window.addEventListener('click', (event) => {
            if (event.target === scorePopup) hideScorePopup();
            if (event.target === historyPopup) hideHistoryPopup();
            if (event.target === difficultyPopup) hideDifficultyPopup();
        });

        // --- Initialization ---
        function initializeApp() {
            applyDifficulty(currentDifficulty); // Apply default difficulty (which also calls performRestartGame)

            const styleSheet = document.createElement("style");
            styleSheet.innerText = `
                #redSlider::-webkit-slider-thumb { background-color: var(--red-thumb-color, #EF4444); }
                #redSlider::-moz-range-thumb { background-color: var(--red-thumb-color, #EF4444); }
                #greenSlider::-webkit-slider-thumb { background-color: var(--green-thumb-color, #22C55E); }
                #greenSlider::-moz-range-thumb { background-color: var(--green-thumb-color, #22C55E); }
                #blueSlider::-webkit-slider-thumb { background-color: var(--blue-thumb-color, #3B82F6); }
                #blueSlider::-moz-range-thumb { background-color: var(--blue-thumb-color, #3B82F6); }
            `;
            document.head.appendChild(styleSheet);
            updateUserColor();
            renderHistory();
        }

        document.addEventListener('DOMContentLoaded', initializeApp);
    </script>
</body>
</html>
